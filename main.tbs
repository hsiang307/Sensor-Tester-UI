include "global.tbh"
include "display.tbh"

dim current_probe_info as probe_info
dim led_probe_timer, led_detect_timer as byte
dim pattern_timer as dword = sys.timercount32

'====================================================================
sub on_sys_init()
	
	lcd_init()

end sub

sub on_sys_timer()
	
	select case current_probe_info.probe_type
		case NONE:
			detect_probe_type()
		case else:
			get_probe_reading()
	end select
		
end sub

sub detect_probe_type()
		
	no_probe_detected_screen()
	
	while current_probe_info.probe_type=NONE
		detect_probe_leds()		
		if tbt28_init(YES)=OK then
			current_probe_info.probe_type=LIGHT
			light_screen()
		end if
		
		if tbt29_init(YES)=OK then
			current_probe_info.probe_type=TEMP
			temp_screen()
		end if
		
		if tbt30_init(YES)=OK then
			current_probe_info.probe_type=TEMP_HUM
			temp_hum_screen()
		end if
		
		if tbt35_init(YES)=OK then
			current_probe_info.probe_type=PRESSURE
			pressure_screen()
		end if
		
		if tbt36_init(NO)=OK then
			current_probe_info.probe_type=ACCELEROMETER
			accelerometer_screen()
		end if
		
	wend
	
end sub

sub get_probe_reading()
	
	polling_probe_leds()
	dim s as string
	
	select case current_probe_info.probe_type
	
	case LIGHT:
			current_probe_info.reading=str(tbt28_get())+" lux"
			if tbt28_get()=65535 then
				current_probe_info.probe_type=NONE
			end if
			update_light_reading()
	
	case TEMP: 
			s=ftostr(tbt29_get_c(),FTOSTR_MODE_AUTO,4)
			s=parse_two_decimal_places(s)+"C"
			current_probe_info.reading=s			
			if tbt29_read_data(TBT29_REG_MFGID)<>TBT29_MFG_ID then
				current_probe_info.probe_type=NONE
			end if
			update_temp_reading()
		
	case TEMP_HUM: 
		dim t,h as float
		dim temp, hum as string
		if tbt30_get_pc(h,t)=OK then
			hum=ftostr(h,FTOSTR_MODE_AUTO,5)
			hum=parse_two_decimal_places(hum)+"%"
			temp=ftostr(t,FTOSTR_MODE_AUTO,5)
			temp=parse_two_decimal_places(temp)+"C "
			current_probe_info.reading=temp+hum
		else
			current_probe_info.probe_type=NONE
		end if
		update_temp_hum_reading()
		
	case PRESSURE: 
		s=ftostr(tbt35_get_kpa(),FTOSTR_MODE_AUTO,5)
		s=parse_two_decimal_places(s)+" kPa"
		current_probe_info.reading=s
		dim w as word=tbt35_get_kpa()
		if w=50 or w=436 or w=175 or w=567 or w=566 or w=18 then
			current_probe_info.probe_type=NONE
		end if
		update_pressure_reading()

	case ACCELEROMETER: 
		dim x,y,z as integer
		tbt36_get_mg(x,y,z)
		current_probe_info.reading="X="+stri(x)+" Y="+stri(y)+" Z="+stri(z)
		if x=0 and y=0 and z=0 then
			current_probe_info.probe_type=NONE
		end if
		update_accelerometer_reading()

	end select
	
end sub

function parse_two_decimal_places(s as string) as string
	dim b as byte
	b=instr(1,s,".",1)
	if b=0 then
		s=s+".00"
	else if len(s)-b=1 then
		s=s+"0"
	else if len(s)-b=3 then
		s=left(s,len(s)-1)
	end if
	
	parse_two_decimal_places=s

end function

sub polling_probe_leds()
	
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	led_probe_timer=led_probe_timer+1
	if led_probe_timer>=2 then
		set_LED(&b00000)
		led_probe_timer=0
	else
		set_LED(&b11111)
	end if
			
end sub

sub detect_probe_leds()
	
	
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	if sys.timercount32-pattern_timer>=1 then
		if led_detect_timer<4 then
			led_detect_timer=led_detect_timer+1
		else
			led_detect_timer=0
		end if
		pattern_timer = sys.timercount32
	end if
	
	select case led_detect_timer
	case 0:
		set_LED(&b00001)
	case 1:
		set_LED(&b00010)
	case 2:
		set_LED(&b00100)
	case 3:
		set_LED(&b01000)
	case 4:
		set_LED(&b10000)
	end select	
	

end sub 